===== autopairs.lua =====
return {
  'windwp/nvim-autopairs',
  event = 'InsertEnter',
  -- Optional dependency
  dependencies = { 'hrsh7th/nvim-cmp' },
  config = function()
    require('nvim-autopairs').setup {}
    -- If you want to automatically add `(` after selecting a function or method
    local cmp_autopairs = require 'nvim-autopairs.completion.cmp'
    local cmp = require 'cmp'
    cmp.event:on('confirm_done', cmp_autopairs.on_confirm_done())
  end,
}


===== colors.lua =====
function ColorMyPencils(color)
    color = color or "nord"
    vim.cmd.colorscheme(color)

    vim.api.nvim_set_hl(0, "Normal", { bg = "none" })
    vim.api.nvim_set_hl(0, "NormalFloat", { bg = "none" })
end

return {
    {
        'shaunsingh/nord.nvim',
        config = function ()
            ColorMyPencils()
        end
    },
    {
        'folke/tokyonight.nvim'
    },
    {
        'navarasu/onedark.nvim'
    },
    {
        'scottmckendry/cyberdream.nvim'
    },
    {
        'tiagovla/tokyodark.nvim'
    }
}


===== dump_lua_directory.lua =====
local M = {}

M.dump_lua_directory = function(dir)
    local uv = vim.loop
    local output_file = dir .. "/directory.txt"
    local fd = assert(io.open(output_file, "w"))

    for name in vim.fs.dir(dir) do
        if name:match("%.lua$") and name ~= "directory.txt" then
            local filepath = dir .. "/" .. name
            local file = io.open(filepath, "r")
            if file then
                fd:write("===== " .. name .. " =====\n")
                fd:write(file:read("*a") .. "\n\n")
                file:close()
            end
        end
    end

    fd:close()
    print("Wrote Lua file dump to: " .. output_file)
end

return M


===== harpoon.lua =====
return {
    'ThePrimeagen/harpoon',
    config = function()
        local mark = require("harpoon.mark")
        local ui = require("harpoon.ui")
        vim.keymap.set("n", "<leader>a", mark.add_file, { desc = 'Add Harpoon Mark' })
        vim.keymap.set("n", "<leader>hh", ui.toggle_quick_menu, { desc = 'Toggle Harpoon Quick Menu' })
        vim.keymap.set("n", "<leader>h1", function() ui.nav_file(1) end, { desc = 'Jump to Harpoon File 1' })
        vim.keymap.set("n", "<leader>h2", function() ui.nav_file(2) end, { desc = 'Jump to Harpoon File 2' })
        vim.keymap.set("n", "<leader>h3", function() ui.nav_file(3) end, { desc = 'Jump to Harpoon File 3' })
        vim.keymap.set("n", "<leader>h4", function() ui.nav_file(4) end, { desc = 'Jump to Harpoon File 4' })
    end
}


===== init.lua =====
return {
    require("plugins.autopairs"),
    require("plugins.harpoon"),
    require("plugins.telescope"),
    require("plugins.whichkey"),
    require("plugins.treesitter"),
    require("plugins.undotree"),
    require("plugins.quickscope"),
    require("plugins.vimfugitive"),
    require("plugins.lsp"),
    require("plugins.colors"),
    require("plugins.snippets"),
    require("plugins.keybindings").setup(),
    require("plugins.settings").setup(),
    require("plugins.trouble"),
    require("plugins.venvselector"),
    require("plugins.lualine"),
}


===== keybindings.lua =====
local M = {}

function M.setup()
    vim.keymap.set("n", "<leader>Tsv", "<cmd>vsp term://<CR>", { desc = "Open vertical terminal split" })
    vim.keymap.set("n", "<leader>Tsh", "<cmd>sp term://<CR>",  { desc = "Open horizontal terminal split" })
    vim.keymap.set("n", "L", "vg_",    { desc = "Select to end of line" })
    vim.keymap.set('n', '<leader>pa', 'ggVGp',         { desc = "select all and paste" })
    vim.keymap.set('n', '<leader>sa', 'ggVG',          { desc = "select all" })
    vim.keymap.set("n", "<leader>gp", "`[v`]", { desc = "select pasted text" })
    vim.keymap.set("n", "<C-u>", "<C-u>zz", { desc = "scroll up and center" })
    vim.keymap.set("n", "<C-d>", "<C-d>zz", { desc = "scroll down and center" })
    vim.keymap.set("n", "n", "nzzzv",       { desc = "keep cursor centered" })
    vim.keymap.set("n", "N", "Nzzzv",       { desc = "keep cursor centered" })
    vim.keymap.set({ "n", "v" }, "<leader>gbf", "<cmd>GBrowse<cr>", { desc = "Git browse current file in browser" })
    vim.keymap.set("n", "<leader>gbc", function()
        vim.cmd "GBrowse!"
    end,                                                       { desc = "Copy URL to current file" })
    vim.keymap.set("v", "<leader>gbl", "<cmd>GBrowse!<CR>",         { desc = "Git browse current file and selected line in browser" })
    vim.keymap.set("n", "gd", "<cmd>Gvdiffsplit<CR>",              { desc = "Git diff current file" })
    vim.keymap.set("n", "<BS>", "^", { desc = "Move to first non-blank character" })
    vim.keymap.set("n", "<leader>mj", "<cmd>m .+1<CR>==",     { desc = "Move line down" })
    vim.keymap.set("n", "<leader>mk", "<cmd>m .-2<CR>==",     { desc = "Move line up" })
    vim.keymap.set("v", "<leader>mj", "<cmd>m '>+1<CR>gv=gv", { desc = "Move Line Down in Visual Mode" })
    vim.keymap.set("v", "<leader>mk", "<cmd>m '<-2<CR>gv=gv", { desc = "Move Line Up in Visual Mode" })
    vim.keymap.set('n', '<leader>ss', '<cmd>s/\\v',                             { desc = "search and replace on line" })
    vim.keymap.set('n', '<leader>SS', '<cmd>%s/\\v',                            { desc = "search and replace in file" })
    vim.keymap.set('v', '<leader><C-s>', '<cmd>s/\\%V',                 { desc = "Search only in visual selection using %V atom" })
    vim.keymap.set('v', '<leader><C-r>', '"hy:%s/\\v<C-r>h//g<left><left>', { desc = "change selection" })
    vim.keymap.set("i", "<c-p>", function()
        require("telescope.builtin").registers()
    end, { remap = true, silent = false, desc = " and paste register in insert mode", })
    vim.keymap.set("n", "<leader>yf", "<cmd>%y<cr>", { desc = "yank current file to the clipboard buffer" })
    vim.keymap.set('n', '<leader>df', '<cmd>%d_<cr>', { desc = 'delete file content to black hole register' })
    vim.keymap.set("n", "<leader>w", "<cmd>w<CR>",    { desc = "Quick save" })
    vim.keymap.set("n", "<leader>cx", "<cmd>!chmod +x %<cr>", { desc = "make file executable" })
    vim.keymap.set(
        "n",
        "<leader>cpf",
        '<cmd>let @+ = expand("%:p")<cr>:lua print("Copied path to: " .. vim.fn.expand("%:p"))<cr>',
        { desc = "Copy current file name and path", silent = false }
    )
    vim.keymap.set("n", "<leader>ld", function()
        local current_dir = vim.fn.expand("%:p:h")
        require("plugins.dump_lua_directory").dump_lua_directory(current_dir)
    end, { desc = "Dump current file's directory to file" })
    vim.keymap.set("n", "<leader>rx", vim.cmd.Rexplore, {desc = "Return to netrw"})
end

return M


===== lint.lua =====
return {
    'mfussenegger/nvim-lint',
    config = function ()
        require("plugins.lint").linters_by_ft = {
            python = {"isort", "ruff", "mypy"},
            rust = {"clippy"},
        }
        end
}


===== lsp.lua =====
local on_attach = function(client, bufnr)
    local buf_map = function(mode, lhs, rhs, desc)
        vim.keymap.set(mode, lhs, rhs, { buffer = bufnr, desc = desc })
    end

    -- === Keymaps ===
    buf_map("n", "gd", vim.lsp.buf.definition, "Go to definition")
    buf_map("n", "gD", vim.lsp.buf.declaration, "Go to declaration")
    buf_map("n", "gi", vim.lsp.buf.implementation, "Go to implementation")
    buf_map("n", "gr", vim.lsp.buf.references, "Go to references")
    buf_map("n", "K", vim.lsp.buf.hover, "Hover documentation")
    buf_map("n", "<C-k>", vim.lsp.buf.signature_help, "Signature help")
    buf_map("n", "<leader>rn", vim.lsp.buf.rename, "Rename symbol")
    buf_map("n", "<leader>ca", vim.lsp.buf.code_action, "Code action")
    buf_map("n", "<leader>ds", vim.lsp.buf.document_symbol, "Document symbols")
    buf_map("n", "<leader>ws", vim.lsp.buf.workspace_symbol, "Workspace symbols")
    buf_map("n", "<leader>dl", vim.diagnostic.setloclist, "Diagnostics list")
    buf_map("n", "[d", vim.diagnostic.goto_prev, "Previous diagnostic")
    buf_map("n", "]d", vim.diagnostic.goto_next, "Next diagnostic")

    -- === Format on Save ===
    if client.supports_method("textDocument/formatting") then
        vim.api.nvim_clear_autocmds({ group = "LspFormatting", buffer = bufnr })
        vim.api.nvim_create_augroup("LspFormatting", { clear = false })
        vim.api.nvim_create_autocmd("BufWritePre", {
            group = "LspFormatting",
            buffer = bufnr,
            callback = function()
                vim.lsp.buf.format({ bufnr = bufnr, async = false })
            end,
        })
    end
end

return {
    "neovim/nvim-lspconfig",
    dependencies = {
        "stevearc/conform.nvim",
        "williamboman/mason.nvim",
        "williamboman/mason-lspconfig.nvim",
        "hrsh7th/cmp-nvim-lsp",
        "hrsh7th/cmp-buffer",
        "hrsh7th/cmp-path",
        "hrsh7th/cmp-cmdline",
        "hrsh7th/nvim-cmp",
        "L3MON4D3/LuaSnip",
        "saadparwaiz1/cmp_luasnip",
        "j-hui/fidget.nvim",
    },

    config = function()
        require("conform").setup({
            formatters_by_ft = {
                python = { "black" },
            }
        })

        require("lint").linters_by_ft = {
            python = {'flake8', 'mypy', 'sonarlint-language-server'},
        }
        local cmp = require('cmp')
        local cmp_lsp = require("cmp_nvim_lsp")
        local capabilities = vim.tbl_deep_extend(
            "force",
            {},
            vim.lsp.protocol.make_client_capabilities(),
            cmp_lsp.default_capabilities())

        require("fidget").setup({})
        require("mason").setup()
        require("mason-lspconfig").setup({
            ensure_installed = {
                "lua_ls",
                "rust_analyzer",
                "pyright",
            },
            handlers = {
                function(server_name) -- default handler (optional)
                    require("lspconfig")[server_name].setup {
                        capabilities = capabilities,
                        on_attach = on_attach,
                    }
                end,

                zls = function()
                    local lspconfig = require("lspconfig")
                    lspconfig.zls.setup({
                        capabilities = capabilities,
                        on_attach = on_attach,
                        root_dir = lspconfig.util.root_pattern(".git", "build.zig", "zls.json"),
                        settings = {
                            zls = {
                                enable_inlay_hints = true,
                                enable_snippets = true,
                                warn_style = true,
                            },
                        },
                    })
                    vim.g.zig_fmt_parse_errors = 0
                    vim.g.zig_fmt_autosave = 0

                end,
                ["lua_ls"] = function()
                    local lspconfig = require("lspconfig")
                    lspconfig.lua_ls.setup {
                        capabilities = capabilities,
                        on_attach = on_attach,
                        settings = {
                            Lua = {
                                runtime = { version = "Lua 5.1" },
                                diagnostics = {
                                    globals = { "bit", "vim", "it", "describe", "before_each", "after_each" },
                                }
                            }
                        }
                    }
                end,
            }
        })

        local cmp_select = { behavior = cmp.SelectBehavior.Select }

        cmp.setup({
            snippet = {
                expand = function(args)
                    require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
                end,
            },
            mapping = cmp.mapping.preset.insert({
                ['<C-p>'] = cmp.mapping.select_prev_item(cmp_select),
                ['<C-n>'] = cmp.mapping.select_next_item(cmp_select),
                ['<CR>'] = cmp.mapping.confirm({ select = true }),
                ["<C-Space>"] = cmp.mapping.complete(),
            }),
            sources = cmp.config.sources({
                { name = "copilot", group_index = 2 },
                { name = 'nvim_lsp' },
                { name = 'luasnip' }, -- For luasnip users.
            }, {
                { name = 'buffer' },
            })
        })

        vim.diagnostic.config({
            -- update_in_insert = true,
            float = {
                focusable = false,
                style = "minimal",
                border = "rounded",
                source = "always",
                header = "",
                prefix = "",
            },
        })
    end
}


===== lualine.lua =====

return {
    'nvim-lualine/lualine.nvim',
    dependencies = { 'nvim-tree/nvim-web-devicons'},
    config = function ()
        require('lualine').setup {
            options = {
                icons_enabled = true,
                theme = 'nord',
                component_separators = { left = '', right = ''},
                section_separators = { left = '', right = ''},
                disabled_filetypes = {
                    statusline = {},
                    winbar = {},
                },
                ignore_focus = {},
                always_divide_middle = true,
                always_show_tabline = true,
                globalstatus = false,
                refresh = {
                    statusline = 100,
                    tabline = 100,
                    winbar = 100,
                }
            },
            sections = {
                lualine_a = {'mode'},
                lualine_b = {'branch', 'diff', 'diagnostics'},
                lualine_c = {'filename'},
                lualine_x = {'encoding', 'fileformat', 'filetype'},
                lualine_y = {'progress'},
                lualine_z = {'location'}
            },
            inactive_sections = {
                lualine_a = {},
                lualine_b = {},
                lualine_c = {'filename'},
                lualine_x = {'location'},
                lualine_y = {},
                lualine_z = {}
            },
            tabline = {},
            winbar = {},
            inactive_winbar = {},
            extensions = {}
        }

    end
}


===== quickscope.lua =====
return {
    'unblevable/quick-scope',
}


===== settings.lua =====
local M = {}

function M.setup()
	-- 4 sapce tab
	vim.opt.tabstop = 4 -- A TAB character looks like 4 spaces
	vim.opt.expandtab = true -- Pressing the TAB key will insert spaces instead of a TAB character
	vim.opt.softtabstop = 4 -- Number of spaces inserted instead of a TAB character
	vim.opt.shiftwidth = 4 -- Number of spaces inserted when indenting

	-- line numbers
	vim.opt.nu = true
	vim.opt.relativenumber = true

	-- scroll options
	vim.opt.scrolloff = 8
	vim.opt.signcolumn = "yes"

	vim.opt.undodir = os.getenv("HOME") .. "/.vim/undodir"

	vim.opt.wrap = false -- disable line wrap
end

return M


===== snippets.lua =====
return {
    "L3MON4D3/LuaSnip",
    dependencies = { "rafamadriz/friendly-snippets" },
}


===== telescope.lua =====
return {
  'nvim-telescope/telescope.nvim',
  tag = '0.1.8', -- or branch = '0.1.x'
  dependencies = { 'nvim-lua/plenary.nvim' },
  config = function()
    require("telescope").setup({})
    -- Optionally, set keymaps here:
    local builtin = require('telescope.builtin')
    vim.keymap.set('n', '<leader>ff', builtin.find_files, { desc = 'Telescope find files' })
    vim.keymap.set('n', '<leader>fg', builtin.live_grep, { desc = 'Telescope live grep' })
    vim.keymap.set('n', '<leader>fb', builtin.buffers, { desc = 'Telescope buffers' })
    vim.keymap.set('n', '<leader>fh', builtin.help_tags, { desc = 'Telescope help tags' })
  end,
}


===== treesitter.lua =====
return {
    {
    "nvim-treesitter/nvim-treesitter",
    build = ":TSUpdate",
    config = function()
        require("nvim-treesitter.configs").setup({
            -- A list of parser names, or "all"
            ensure_installed = {
                "vimdoc", "javascript", "typescript", "c", "lua", "rust",
                "jsdoc", "bash", "python", "terraform", "sql",
            },

            -- Install parsers synchronously (only applied to `ensure_installed`)
            sync_install = false,

            -- Automatically install missing parsers when entering buffer
            -- Recommendation: set to false if you don"t have `tree-sitter` CLI installed locally
            auto_install = true,

            indent = {
                enable = true
            },

            highlight = {
                -- `false` will disable the whole extension
                enable = true,
                disable = function(lang, buf)
                    if lang == "html" then
                        print("disabled")
                        return true
                    end

                    local max_filesize = 100 * 1024 -- 100 KB
                    local ok, stats = pcall(vim.loop.fs_stat, vim.api.nvim_buf_get_name(buf))
                    if ok and stats and stats.size > max_filesize then
                        vim.notify(
                            "File larger than 100KB treesitter disabled for performance",
                            vim.log.levels.WARN,
                            {title = "Treesitter"}
                        )
                        return true
                    end
                end,

                -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
                -- Set this to `true` if you depend on "syntax" being enabled (like for indentation).
                -- Using this option may slow down your editor, and you may see some duplicate highlights.
                -- Instead of true it can also be a list of languages
                additional_vim_regex_highlighting = { "markdown" },
            },
        })

        local treesitter_parser_config = require("nvim-treesitter.parsers").get_parser_configs()
        treesitter_parser_config.templ = {
            install_info = {
                url = "https://github.com/vrischmann/tree-sitter-templ.git",
                files = {"src/parser.c", "src/scanner.c"},
                branch = "master",
            },
        }

        vim.treesitter.language.register("templ", "templ")
    end
    },

    {
        "nvim-treesitter/nvim-treesitter-context",
        after = "nvim-treesitter",
        config = function()
            require'treesitter-context'.setup{
                enable = true, -- Enable this plugin (Can be enabled/disabled later via commands)
                multiwindow = false, -- Enable multiwindow support.
                max_lines = 0, -- How many lines the window should span. Values <= 0 mean no limit.
                min_window_height = 0, -- Minimum editor window height to enable context. Values <= 0 mean no limit.
                line_numbers = true,
                multiline_threshold = 20, -- Maximum number of lines to show for a single context
                trim_scope = 'outer', -- Which context lines to discard if `max_lines` is exceeded. Choices: 'inner', 'outer'
                mode = 'cursor',  -- Line used to calculate context. Choices: 'cursor', 'topline'
                -- Separator between context and content. Should be a single character string, like '-'.
                -- When separator is set, the context will only show up when there are at least 2 lines above cursorline.
                separator = nil,
                zindex = 20, -- The Z-index of the context window
                on_attach = nil, -- (fun(buf: integer): boolean) return false to disable attaching
            }
        end
    }
}


===== trouble.lua =====
return{
    "folke/trouble.nvim",
    opts = {}, -- for default options, refer to the configuration section for custom setup.
    cmd = "Trouble",
    keys = {
        {
            "<leader>xx",
            "<cmd>Trouble diagnostics toggle<cr>",
            desc = "Diagnostics (Trouble)",
        },
        {
            "<leader>xX",
            "<cmd>Trouble diagnostics toggle filter.buf=0<cr>",
            desc = "Buffer Diagnostics (Trouble)",
        },
        {
            "<leader>cs",
            "<cmd>Trouble symbols toggle focus=false<cr>",
            desc = "Symbols (Trouble)",
        },
        {
            "<leader>cl",
            "<cmd>Trouble lsp toggle focus=false win.position=right<cr>",
            desc = "LSP Definitions / references / ... (Trouble)",
        },
        {
            "<leader>xL",
            "<cmd>Trouble loclist toggle<cr>",
            desc = "Location List (Trouble)",
        },
        {
            "<leader>xQ",
            "<cmd>Trouble qflist toggle<cr>",
            desc = "Quickfix List (Trouble)",
        },
    },
}


===== undotree.lua =====
return {
    "mbbill/undotree",
    config = function() 
        vim.keymap.set("n", "<leader>u", vim.cmd.UndotreeToggle, { desc = 'Toggle UndoTree' })
    end
}


===== venvselector.lua =====
return {
  "linux-cultist/venv-selector.nvim",
  dependencies = {
    "neovim/nvim-lspconfig",
    "mfussenegger/nvim-dap", "mfussenegger/nvim-dap-python", --optional
    { "nvim-telescope/telescope.nvim", branch = "0.1.x", dependencies = { "nvim-lua/plenary.nvim" } },
  },
  lazy = false,
  branch = "regexp", -- This is the regexp branch, use this for the new version
  keys = {
    { ",v", "<cmd>VenvSelect<cr>" },
  },
  ---@type venv-selector.Config
  opts = {
    -- Your settings go here
  },
}


===== vimfugitive.lua =====
return {
    "tpope/vim-fugitive",
    config = function()
        vim.keymap.set('n', '<leader>gg', vim.cmd.Git, { desc = 'Git status' })
        vim.keymap.set('n', '<leader>gp', vim.cmd.Git('pull'), { desc = 'Git pull' })
        vim.keymap.set('n', '<leader>gP', vim.cmd.Git('push'), { desc = 'Git push' })
        vim.keymap.set('n', '<leader>ga', vim.cmd.Git('add .'), { desc = 'Git add .' })
    end

}


===== vinegar.lua =====
return {
"tpope/vim-vinegar"
}


===== whichkey.lua =====
return {
  "folke/which-key.nvim",
  event = "VeryLazy",
  opts = {
    -- configuration options for which-key (if any)
  },
  keys = {
    {
      "<leader>?",
      function()
        require("which-key").show({ global = false })
      end,
      desc = "Buffer Local Keymaps (which-key)",
    },
  },
}


